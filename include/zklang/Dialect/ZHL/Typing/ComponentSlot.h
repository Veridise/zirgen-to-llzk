#pragma once

#include <mlir/Support/LLVM.h>
#include <zklang/Dialect/ZHL/Typing/FrameSlot.h>
#include <zklang/Dialect/ZHL/Typing/TypeBindings.h>

namespace zhl {

class ComponentSlot : public FrameSlot {
public:
  /// Instantiates a slot for a component. Marks the input binding with the slot assigned to.
  ComponentSlot(const TypeBindings &bindings, TypeBinding &binding);
  ComponentSlot(const TypeBindings &bindings, TypeBinding &binding, mlir::StringRef name);

  static bool classof(const FrameSlot *);

  /// Returns a copy of the binding. This is because depending on the type of parent this slot has
  /// it may generate Array bindings wrapping the inner binding.
  TypeBinding getBinding() const;

  /// Change the type binding this slot stores
  void setBinding(TypeBinding &);

  /// Traverses the parent frames chain collecting all the induction variables associated to array
  /// frames. If the array is empty implies that the slot is not contained within array frames.
  /// If the array is not empty then the TypeBinding generated by TypeBinding will be of type Array
  /// as many times as induction variables are returned by this function.
  mlir::SmallVector<mlir::Value> collectIVs() const;

  bool contains(const TypeBinding &) const;

  void editInnerBinding(llvm::function_ref<void(TypeBinding &)>);

protected:
  ComponentSlot(
      FrameSlotKind, const TypeBindings &bindings, const TypeBinding &binding, mlir::StringRef name
  );

private:
  TypeBinding binding;
  const TypeBindings *bindingsCtx;
};

} // namespace zhl
