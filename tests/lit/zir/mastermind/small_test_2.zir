// RUN: zklang -I %S/Inputs -o - %s --print-debug-info=false | FileCheck %s --enable-var-scope

component CheckBounds(pegs: Array<Reg, 3>) {
  for peg : pegs {
    reduce for c : 0..1 { NondetReg(peg) } init 64 with Div
  }
}
// CHECK-LABEL: llzk.struct @CheckBounds<[]> {
// CHECK-DAG:     field @"$super" : !llzk.array<3 x !llzk.felt>
// CHECK-DAG:     field @"$temp_0" : !llzk.array<3,1 x !llzk.struct<@Div<[]>>>
// CHECK-DAG:     field @"$temp" : !llzk.array<3,1 x !llzk.struct<@NondetReg<[]>>> {column}
// CHECK-DAG:     field @"$array_0" : !llzk.array<3,1 x !llzk.struct<@NondetReg<[]>>> {column}
// CHECK-DAG:     field @"$array" : !llzk.array<3 x !llzk.felt>
// CHECK-LABEL:   func @compute(
// CHECK-SAME:                  %[[V0:[0-9a-zA-Z_\.]+]]: !llzk.array<3 x !llzk.struct<@Reg<[]>>>) -> !llzk.struct<@CheckBounds<[]>> {
// CHECK-DAG:       %[[V1:[0-9a-zA-Z_\.]+]] = constfelt  64
// CHECK-DAG:       %[[V3:[0-9a-zA-Z_\.]+]] = arith.constant 3 : index
// CHECK-DAG:       %[[V4:[0-9a-zA-Z_\.]+]] = arith.constant 0 : index
// CHECK-DAG:       %[[V5:[0-9a-zA-Z_\.]+]] = arith.constant 1 : index
// CHECK-DAG:       %[[V6:[0-9a-zA-Z_\.]+]] = new_struct : <@CheckBounds<[]>>
// CHECK-DAG:       %[[V7:[0-9a-zA-Z_\.]+]] = new_array  : <3 x !llzk.felt>
// CHECK-DAG:       scf.for %[[V8:[0-9a-zA-Z_\.]+]] = %[[V4]] to %[[V3]] step %[[V5]] {
// CHECK-DAG:         %[[V9:[0-9a-zA-Z_\.]+]] = llzk.readarr %[[V0]]{{\[}}%[[V8]]] : <3 x !llzk.struct<@Reg<[]>>>, !llzk.struct<@Reg<[]>>
// CHECK-DAG:         %[[V11:[0-9a-zA-Z_\.]+]] = llzk.new_array  : <1 x !llzk.struct<@NondetReg<[]>>>
// CHECK-DAG:         %[[V13:[0-9a-zA-Z_\.]+]] = llzk.readf %[[V9]][@"$super"] : <@Reg<[]>>, !llzk.struct<@NondetReg<[]>>
// CHECK-DAG:         %[[V14:[0-9a-zA-Z_\.]+]] = llzk.readf %[[V13]][@"$super"] : <@NondetReg<[]>>, !llzk.felt
// CHECK-DAG:         %[[V15:[0-9a-zA-Z_\.]+]] = llzk.call @NondetReg::@compute(%[[V14]]) : (!llzk.felt) -> !llzk.struct<@NondetReg<[]>>
// CHECK-DAG:         %[[V16:[0-9a-zA-Z_\.]+]] = llzk.readf %[[V6]][@"$temp"] : <@CheckBounds<[]>>, !llzk.array<3,1 x !llzk.struct<@NondetReg<[]>>>
// CHECK-DAG:         llzk.writearr %[[V16]]{{\[}}%[[V8]], %[[V4]]] = %[[V15]] : <3,1 x !llzk.struct<@NondetReg<[]>>>, !llzk.struct<@NondetReg<[]>>
// CHECK-DAG:         llzk.writef %[[V6]][@"$temp"] = %[[V16]] : <@CheckBounds<[]>>, !llzk.array<3,1 x !llzk.struct<@NondetReg<[]>>>
// CHECK-DAG:         %[[V17:[0-9a-zA-Z_\.]+]] = llzk.readf %[[V6]][@"$temp"] : <@CheckBounds<[]>>, !llzk.array<3,1 x !llzk.struct<@NondetReg<[]>>>
// CHECK-DAG:         %[[V18:[0-9a-zA-Z_\.]+]] = llzk.readarr %[[V17]]{{\[}}%[[V8]], %[[V4]]] : <3,1 x !llzk.struct<@NondetReg<[]>>>, !llzk.struct<@NondetReg<[]>>
// CHECK-DAG:         llzk.writearr %[[V11]]{{\[}}%[[V4]]] = %[[V18]] : <1 x !llzk.struct<@NondetReg<[]>>>, !llzk.struct<@NondetReg<[]>>
// CHECK-DAG:         %[[V19:[0-9a-zA-Z_\.]+]] = llzk.readf %[[V6]][@"$array_0"] : <@CheckBounds<[]>>, !llzk.array<3,1 x !llzk.struct<@NondetReg<[]>>>
// CHECK-DAG:         llzk.insertarr %[[V19]]{{\[}}%[[V8]]] = %[[V11]] : <3,1 x !llzk.struct<@NondetReg<[]>>>, <1 x !llzk.struct<@NondetReg<[]>>>
// CHECK-DAG:         llzk.writef %[[V6]][@"$array_0"] = %[[V19]] : <@CheckBounds<[]>>, !llzk.array<3,1 x !llzk.struct<@NondetReg<[]>>>
// CHECK-DAG:         %[[V20:[0-9a-zA-Z_\.]+]] = llzk.readf %[[V6]][@"$array_0"] : <@CheckBounds<[]>>, !llzk.array<3,1 x !llzk.struct<@NondetReg<[]>>>
// CHECK-DAG:         %[[V21:[0-9a-zA-Z_\.]+]] = llzk.extractarr %[[V20]]{{\[}}%[[V8]]] : <3,1 x !llzk.struct<@NondetReg<[]>>>
// CHECK-DAG:         %[[V22:[0-9a-zA-Z_\.]+]] = llzk.readarr %[[V21]]{{\[}}%[[V4]]] : <1 x !llzk.struct<@NondetReg<[]>>>, !llzk.struct<@NondetReg<[]>>
// CHECK-DAG:         %[[V23:[0-9a-zA-Z_\.]+]] = llzk.readf %[[V22]][@"$super"] : <@NondetReg<[]>>, !llzk.felt
// CHECK-DAG:         %[[V24:[0-9a-zA-Z_\.]+]] = llzk.call @Div::@compute(%[[V1]], %[[V23]]) : (!llzk.felt, !llzk.felt) -> !llzk.struct<@Div<[]>>
// CHECK-DAG:         %[[V25:[0-9a-zA-Z_\.]+]] = llzk.readf %[[V6]][@"$temp_0"] : <@CheckBounds<[]>>, !llzk.array<3,1 x !llzk.struct<@Div<[]>>>
// CHECK-DAG:         llzk.writearr %[[V25]]{{\[}}%[[V8]], %[[V4]]] = %[[V24]] : <3,1 x !llzk.struct<@Div<[]>>>, !llzk.struct<@Div<[]>>
// CHECK-DAG:         llzk.writef %[[V6]][@"$temp_0"] = %[[V25]] : <@CheckBounds<[]>>, !llzk.array<3,1 x !llzk.struct<@Div<[]>>>
// CHECK-DAG:         %[[V26:[0-9a-zA-Z_\.]+]] = llzk.readf %[[V6]][@"$temp_0"] : <@CheckBounds<[]>>, !llzk.array<3,1 x !llzk.struct<@Div<[]>>>
// CHECK-DAG:         %[[V27:[0-9a-zA-Z_\.]+]] = llzk.readarr %[[V26]]{{\[}}%[[V8]], %[[V4]]] : <3,1 x !llzk.struct<@Div<[]>>>, !llzk.struct<@Div<[]>>
// CHECK-DAG:         %[[V28:[0-9a-zA-Z_\.]+]] = llzk.readf %[[V27]][@"$super"] : <@Div<[]>>, !llzk.felt
// CHECK-DAG:         llzk.writearr %[[V7]]{{\[}}%[[V8]]] = %[[V28]] : <3 x !llzk.felt>, !llzk.felt
// CHECK-DAG:       } {original_op = "map"}
// CHECK-DAG:       writef %[[V6]][@"$array"] = %[[V7]] : <@CheckBounds<[]>>, !llzk.array<3 x !llzk.felt>
// CHECK-DAG:       %[[V29:[0-9a-zA-Z_\.]+]] = readf %[[V6]][@"$array"] : <@CheckBounds<[]>>, !llzk.array<3 x !llzk.felt>
// CHECK-DAG:       writef %[[V6]][@"$super"] = %[[V29]] : <@CheckBounds<[]>>, !llzk.array<3 x !llzk.felt>
// CHECK-DAG:       return %[[V6]] : !llzk.struct<@CheckBounds<[]>>
// CHECK-DAG:     }
// CHECK-LABEL:   func @constrain(
// CHECK-SAME:                  %[[V30:[0-9a-zA-Z_\.]+]]: !llzk.struct<@CheckBounds<[]>>, %[[V31:[0-9a-zA-Z_\.]+]]: !llzk.array<3 x !llzk.struct<@Reg<[]>>>) {
// CHECK-DAG:       %[[V32:[0-9a-zA-Z_\.]+]] = constfelt  64
// CHECK-DAG:       %[[V33:[0-9a-zA-Z_\.]+]] = constfelt  0
// CHECK-DAG:       %[[V34:[0-9a-zA-Z_\.]+]] = arith.constant 3 : index
// CHECK-DAG:       %[[V35:[0-9a-zA-Z_\.]+]] = arith.constant 0 : index
// CHECK-DAG:       %[[V36:[0-9a-zA-Z_\.]+]] = arith.constant 1 : index
// CHECK-DAG:       %[[V37:[0-9a-zA-Z_\.]+]] = new_array  : <3 x !llzk.felt>
// CHECK-DAG:       scf.for %[[V38:[0-9a-zA-Z_\.]+]] = %[[V35]] to %[[V34]] step %[[V36]] {
// CHECK-DAG:         %[[V39:[0-9a-zA-Z_\.]+]] = llzk.readarr %[[V31]]{{\[}}%[[V38]]] : <3 x !llzk.struct<@Reg<[]>>>, !llzk.struct<@Reg<[]>>
// CHECK-DAG:         %[[V41:[0-9a-zA-Z_\.]+]] = llzk.new_array  : <1 x !llzk.struct<@NondetReg<[]>>>
// CHECK-DAG:         %[[V43:[0-9a-zA-Z_\.]+]] = llzk.readf %[[V39]][@"$super"] : <@Reg<[]>>, !llzk.struct<@NondetReg<[]>>
// CHECK-DAG:         %[[V44:[0-9a-zA-Z_\.]+]] = llzk.readf %[[V43]][@"$super"] : <@NondetReg<[]>>, !llzk.felt
// CHECK-DAG:         %[[V45:[0-9a-zA-Z_\.]+]] = llzk.readf %[[V30]][@"$temp"] : <@CheckBounds<[]>>, !llzk.array<3,1 x !llzk.struct<@NondetReg<[]>>>
// CHECK-DAG:         %[[V46:[0-9a-zA-Z_\.]+]] = llzk.readf %[[V30]][@"$temp"] : <@CheckBounds<[]>>, !llzk.array<3,1 x !llzk.struct<@NondetReg<[]>>>
// CHECK-DAG:         %[[V47:[0-9a-zA-Z_\.]+]] = llzk.readarr %[[V46]]{{\[}}%[[V38]], %[[V35]]] : <3,1 x !llzk.struct<@NondetReg<[]>>>, !llzk.struct<@NondetReg<[]>>
// CHECK-DAG:         llzk.call @NondetReg::@constrain(%[[V47]], %[[V44]]) : (!llzk.struct<@NondetReg<[]>>, !llzk.felt) -> ()
// CHECK-DAG:         llzk.writearr %[[V41]]{{\[}}%[[V35]]] = %[[V47]] : <1 x !llzk.struct<@NondetReg<[]>>>, !llzk.struct<@NondetReg<[]>>
// CHECK-DAG:         %[[V48:[0-9a-zA-Z_\.]+]] = llzk.readf %[[V30]][@"$array_0"] : <@CheckBounds<[]>>, !llzk.array<3,1 x !llzk.struct<@NondetReg<[]>>>
// CHECK-DAG:         %[[V49:[0-9a-zA-Z_\.]+]] = llzk.readf %[[V30]][@"$array_0"] : <@CheckBounds<[]>>, !llzk.array<3,1 x !llzk.struct<@NondetReg<[]>>>
// CHECK-DAG:         %[[V50:[0-9a-zA-Z_\.]+]] = llzk.extractarr %[[V49]]{{\[}}%[[V38]]] : <3,1 x !llzk.struct<@NondetReg<[]>>>
// CHECK-DAG:         %[[V51:[0-9a-zA-Z_\.]+]] = llzk.readarr %[[V50]]{{\[}}%[[V35]]] : <1 x !llzk.struct<@NondetReg<[]>>>, !llzk.struct<@NondetReg<[]>>
// CHECK-DAG:         %[[V52:[0-9a-zA-Z_\.]+]] = llzk.readf %[[V51]][@"$super"] : <@NondetReg<[]>>, !llzk.felt
// CHECK-DAG:         %[[V53:[0-9a-zA-Z_\.]+]] = llzk.readf %[[V30]][@"$temp_0"] : <@CheckBounds<[]>>, !llzk.array<3,1 x !llzk.struct<@Div<[]>>>
// CHECK-DAG:         %[[V54:[0-9a-zA-Z_\.]+]] = llzk.readf %[[V30]][@"$temp_0"] : <@CheckBounds<[]>>, !llzk.array<3,1 x !llzk.struct<@Div<[]>>>
// CHECK-DAG:         %[[V55:[0-9a-zA-Z_\.]+]] = llzk.readarr %[[V54]]{{\[}}%[[V38]], %[[V35]]] : <3,1 x !llzk.struct<@Div<[]>>>, !llzk.struct<@Div<[]>>
// CHECK-DAG:         llzk.call @Div::@constrain(%[[V55]], %[[V32]], %[[V52]]) : (!llzk.struct<@Div<[]>>, !llzk.felt, !llzk.felt) -> ()
// CHECK-DAG:         %[[V56:[0-9a-zA-Z_\.]+]] = llzk.readf %[[V55]][@"$super"] : <@Div<[]>>, !llzk.felt
// CHECK-DAG:         llzk.writearr %[[V37]]{{\[}}%[[V38]]] = %[[V56]] : <3 x !llzk.felt>, !llzk.felt
// CHECK-DAG:       } {original_op = "map"}
// CHECK-DAG:       return
// CHECK-DAG:     }
// CHECK-DAG:   }
