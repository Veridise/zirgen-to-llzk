// RUN: zklang -o - %s | FileCheck %s

component Foo(a: Array<Array<Val, 2>, 1>) {
}

component Baz(n: Val) {
  [n, n+1]
}

component Bar() {
  Foo([Baz(1)])
// CHECK-LABEL:    function.def @compute() -> !struct.type<@Bar<[]>> 
//       CHECK:      %[[T0:[0-9a-zA-Z_\.]+]] = arith.constant 1 : index
//       CHECK:      %[[T1:[0-9a-zA-Z_\.]+]] = arith.constant 0 : index
//       CHECK:      %[[T2:[0-9a-zA-Z_\.]+]] = array.new %{{[0-9a-zA-Z_\.]+}} : <1 x !struct.type<@Baz<[]>>> 
//       CHECK:      %[[T3:[0-9a-zA-Z_\.]+]] = array.new  : <1,2 x !felt.type> 
//       CHECK:      %[[T4:[0-9a-zA-Z_\.]+]] = array.len %[[T2]], %[[T1]] : <1 x !struct.type<@Baz<[]>>>
//       CHECK:      scf.for %[[A0:[0-9a-zA-Z_\.]+]] = %[[T1]] to %[[T0]] step %[[T4]] {
//       CHECK:        %[[T5:[0-9a-zA-Z_\.]+]] = array.read %[[T2]][%[[A0]]] : <1 x !struct.type<@Baz<[]>>>, !struct.type<@Baz<[]>>
//       CHECK:        %[[T6:[0-9a-zA-Z_\.]+]] = struct.readf %[[T5]][@"$super"] : <@Baz<[]>>, !array.type<2 x !felt.type>
//       CHECK:        array.insert %[[T3]][%[[A0]]] = %[[T6]] : <1,2 x !felt.type>, <2 x !felt.type>
//       CHECK:      }
//       CHECK:      %[[T7:[0-9a-zA-Z_\.]+]] = function.call @Foo::@compute(%[[T3]]) : (!array.type<1,2 x !felt.type>) -> !struct.type<@Foo<[]>> 
//       CHECK:      return %{{[0-9a-zA-Z_\.]+}} : !struct.type<@Bar<[]>>
}
