// RUN: zklang -o - %s --strip-debug-info | FileCheck %s --enable-var-scope

component Foo<N: Val, P: Val>() {
  x := Reg(2);
  x@(N+P) = 2;
}

//       CHECK: #map = affine_map<()[s0, s1] -> (-(s0 + s1))> 
// CHECK-LABEL: struct.def @Foo<[@N, @P]> {
//       CHECK:    field @"$super" : !struct.type<@Component<[]>>
//       CHECK:    field @"$temp" : !struct.type<@Component<[]>>
//       CHECK:    field @x : !struct.type<@Reg<[]>>
// CHECK-LABEL:    function.def @compute() -> !struct.type<@Foo<[@N, @P]>> 
//       CHECK:      %[[T2:[0-9a-zA-Z_.]+]] =  felt.const  2
//       CHECK:      %[[T0:[0-9a-zA-Z_.]+]] =  struct.new : <@Foo<[@N, @P]>>
//       CHECK:      %[[T9:[0-9a-zA-Z_.]+]] =  function.call @Reg::@compute(%[[T2]]) : (!felt.type) -> !struct.type<@Reg<[]>> 
//       CHECK:      struct.writef %[[T0]][@x] = %[[T9]] : <@Foo<[@N, @P]>>, !struct.type<@Reg<[]>>
//       CHECK:      %[[T31:[0-9a-zA-Z_.]+]] =  function.call @Component::@compute() : () -> !struct.type<@Component<[]>> 
//       CHECK:      struct.writef %[[T0]][@"$temp"] = %[[T31]] : <@Foo<[@N, @P]>>, !struct.type<@Component<[]>>
//       CHECK:      %[[T32:[0-9a-zA-Z_.]+]] =  struct.readf %[[T0]][@"$temp"] : <@Foo<[@N, @P]>>, !struct.type<@Component<[]>>
//       CHECK:      struct.writef %[[T0]][@"$super"] = %[[T32]] : <@Foo<[@N, @P]>>, !struct.type<@Component<[]>>
//       CHECK:      return %[[T0]] : !struct.type<@Foo<[@N, @P]>>
//       CHECK:    }
// CHECK-LABEL:    function.def @constrain
//  CHECK-SAME:                   (%[[A0:[0-9a-zA-Z_.]+]]: !struct.type<@Foo<[@N, @P]>>
//       CHECK:      %[[T1:[0-9a-zA-Z_.]+]] =  felt.const  2
//       CHECK:      %[[T29:[0-9a-zA-Z_.]+]] =  struct.readf %[[A0]][@x] : <@Foo<[@N, @P]>>, !struct.type<@Reg<[]>>
//       CHECK:      function.call @Reg::@constrain(%[[T29]], %[[T1]]) : (!struct.type<@Reg<[]>>, !felt.type) -> () 
//       CHECK:      %[[T6:[0-9a-zA-Z_.]+]] = poly.read_const @N : index
//       CHECK:      %[[T7:[0-9a-zA-Z_.]+]] = poly.read_const @P : index
//       CHECK:      %[[T8:[0-9a-zA-Z_.]+]] =  struct.readf %[[A0]][@x] {()[%[[T6]], %[[T7]]]} : <@Foo<[@N, @P]>>, !struct.type<@Reg<[]>> {tableOffset = #map}
//       CHECK:      %[[T15:[0-9a-zA-Z_.]+]] =  struct.readf %[[T8]][@"$super"] : <@Reg<[]>>, !struct.type<@NondetReg<[]>>
//       CHECK:      %[[T16:[0-9a-zA-Z_.]+]] =  struct.readf %[[T15]][@"$super"] : <@NondetReg<[]>>, !felt.type
//       CHECK:      constrain.eq %[[T16]], %[[T1]] : !felt.type, !felt.type
//       CHECK:      %[[T18:[0-9a-zA-Z_.]+]] =  struct.readf %[[A0]][@"$temp"] : <@Foo<[@N, @P]>>, !struct.type<@Component<[]>>
//       CHECK:      function.call @Component::@constrain(%[[T18]]) : (!struct.type<@Component<[]>>) -> () 
//       CHECK:      return
//       CHECK:    }
//       CHECK:  }
