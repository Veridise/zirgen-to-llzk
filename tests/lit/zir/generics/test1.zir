// RUN: zklang -o - %s | FileCheck %s

component Head<T: Type, N: Val>(arr: Array<T, N>) {
  arr[0]
}

component A<N: Val>() {
  Head<Val, 3>([N,N+1,N+2])
}

component B() {
  Head<A<1>, 2>([A<1>(), A<1>()])
}

component Top() {
  a := A<1>();
  b := B();
  a = b;
}

//      CHECK:  llzk.struct @Head<[@T, @N]> {
// CHECK-NEXT:    field @"$super" : !llzk.felt
// CHECK-NEXT:    func @compute(%arg0: !llzk.array<@N x !llzk.tvar<@T>>) -> !llzk.struct<@Head<[@T, @N]>> {
// CHECK-NEXT:      %felt_const_0 = constfelt  0
// CHECK-NEXT:      %self = new_struct : <@Head<[@T, @N]>>
// CHECK-NEXT:      %0 = read_const @N : !llzk.felt
// CHECK-NEXT:      %1 = toindex %felt_const_0
// CHECK-NEXT:      %2 = readarr %arg0[%1] : <@N x !llzk.tvar<@T>>, !llzk.tvar<@T>
// CHECK-NEXT:      writef %self[@"$super"] = %2 : <@Head<[@T, @N]>>, !llzk.tvar<@T>
// CHECK-NEXT:      return %self : !llzk.struct<@Head<[@T, @N]>>
// CHECK-NEXT:    }
// CHECK-NEXT:    func @constrain(%arg0: !llzk.struct<@Head<[@T, @N]>>, %arg1: !llzk.array<@N x !llzk.tvar<@T>>) {
// CHECK-NEXT:      %felt_const_0 = constfelt  0
// CHECK-NEXT:      %0 = read_const @N : !llzk.felt
// CHECK-NEXT:      %1 = readf %arg0[@"$super"] : <@Head<[@T, @N]>>, !llzk.tvar<@T>
// CHECK-NEXT:      %2 = toindex %felt_const_0
// CHECK-NEXT:      %3 = readarr %arg1[%2] : <@N x !llzk.tvar<@T>>, !llzk.tvar<@T>
// CHECK-NEXT:      return
// CHECK-NEXT:    }
// CHECK-NEXT:  }

//      CHECK:  llzk.struct @A<[@N]> {
// CHECK-NEXT:    field @"$super" : !llzk.struct<@Head<[!llzk.struct<@Component<[]>>, !llzk.felt]>>
// CHECK-NEXT:    field @"$temp" : !llzk.struct<@Head<[!llzk.struct<@Component<[]>>, !llzk.felt]>>
// CHECK-NEXT:    func @compute() -> !llzk.struct<@A<[@N]>> {
// CHECK-NEXT:      %felt_const_2 = constfelt  2
// CHECK-NEXT:      %felt_const_1 = constfelt  1
// CHECK-NEXT:      %self = new_struct : <@A<[@N]>>
// CHECK-NEXT:      %0 = read_const @N : !llzk.felt
// CHECK-NEXT:      %1 = add %0, %felt_const_1 : !llzk.felt, !llzk.felt
// CHECK-NEXT:      %2 = add %0, %felt_const_2 : !llzk.felt, !llzk.felt
// CHECK-NEXT:      %array = new_array %0, %1, %2 : <3 x !llzk.felt>
// CHECK-NEXT:      %3 = call @Head::@compute(%array) : (!llzk.array<3 x !llzk.felt>) -> !llzk.struct<@Head<[!llzk.struct<@Component<[]>>, !llzk.felt]>>
// CHECK-NEXT:      writef %self[@"$temp"] = %3 : <@A<[@N]>>, !llzk.struct<@Head<[!llzk.struct<@Component<[]>>, !llzk.felt]>>
// CHECK-NEXT:      %4 = readf %self[@"$temp"] : <@A<[@N]>>, !llzk.struct<@Head<[!llzk.struct<@Component<[]>>, !llzk.felt]>>
// CHECK-NEXT:      writef %self[@"$super"] = %4 : <@A<[@N]>>, !llzk.struct<@Head<[!llzk.struct<@Component<[]>>, !llzk.felt]>>
// CHECK-NEXT:      return %self : !llzk.struct<@A<[@N]>>
// CHECK-NEXT:    }
// CHECK-NEXT:    func @constrain(%arg0: !llzk.struct<@A<[@N]>>) {
// CHECK-NEXT:      %felt_const_2 = constfelt  2
// CHECK-NEXT:      %felt_const_1 = constfelt  1
// CHECK-NEXT:      %0 = read_const @N : !llzk.felt
// CHECK-NEXT:      %1 = add %0, %felt_const_1 : !llzk.felt, !llzk.felt
// CHECK-NEXT:      %2 = add %0, %felt_const_2 : !llzk.felt, !llzk.felt
// CHECK-NEXT:      %array = new_array %0, %1, %2 : <3 x !llzk.felt>
// CHECK-NEXT:      %3 = readf %arg0[@"$temp"] : <@A<[@N]>>, !llzk.struct<@Head<[!llzk.struct<@Component<[]>>, !llzk.felt]>>
// CHECK-NEXT:      call @Head::@constrain(%3, %array) : (!llzk.struct<@Head<[!llzk.struct<@Component<[]>>, !llzk.felt]>>, !llzk.array<3 x !llzk.felt>) -> ()
// CHECK-NEXT:      return
// CHECK-NEXT:    }
// CHECK-NEXT:  }

//      CHECK:  llzk.struct @B<[]> {
// CHECK-NEXT:    field @"$super" : !llzk.struct<@Head<[!llzk.struct<@Component<[]>>, !llzk.felt]>>
// CHECK-NEXT:    field @"$temp_1" : !llzk.struct<@Head<[!llzk.struct<@Component<[]>>, !llzk.felt]>>
// CHECK-NEXT:    field @"$temp_0" : !llzk.struct<@A<[!llzk.felt]>>
// CHECK-NEXT:    field @"$temp" : !llzk.struct<@A<[!llzk.felt]>>
// CHECK-NEXT:    func @compute() -> !llzk.struct<@B<[]>> {
// CHECK-NEXT:      %self = new_struct : <@B<[]>>
// CHECK-NEXT:      %0 = call @A::@compute() : () -> !llzk.struct<@A<[!llzk.felt]>>
// CHECK-NEXT:      writef %self[@"$temp"] = %0 : <@B<[]>>, !llzk.struct<@A<[!llzk.felt]>>
// CHECK-NEXT:      %1 = readf %self[@"$temp"] : <@B<[]>>, !llzk.struct<@A<[!llzk.felt]>>
// CHECK-NEXT:      %2 = call @A::@compute() : () -> !llzk.struct<@A<[!llzk.felt]>>
// CHECK-NEXT:      writef %self[@"$temp_0"] = %2 : <@B<[]>>, !llzk.struct<@A<[!llzk.felt]>>
// CHECK-NEXT:      %3 = readf %self[@"$temp_0"] : <@B<[]>>, !llzk.struct<@A<[!llzk.felt]>>
// CHECK-NEXT:      %array = new_array %1, %3 : <2 x !llzk.struct<@A<[!llzk.felt]>>>
// CHECK-NEXT:      %4 = call @Head::@compute(%array) : (!llzk.array<2 x !llzk.struct<@A<[!llzk.felt]>>>) -> !llzk.struct<@Head<[!llzk.struct<@Component<[]>>, !llzk.felt]>>
// CHECK-NEXT:      writef %self[@"$temp_1"] = %4 : <@B<[]>>, !llzk.struct<@Head<[!llzk.struct<@Component<[]>>, !llzk.felt]>>
// CHECK-NEXT:      %5 = readf %self[@"$temp_1"] : <@B<[]>>, !llzk.struct<@Head<[!llzk.struct<@Component<[]>>, !llzk.felt]>>
// CHECK-NEXT:      writef %self[@"$super"] = %5 : <@B<[]>>, !llzk.struct<@Head<[!llzk.struct<@Component<[]>>, !llzk.felt]>>
// CHECK-NEXT:      return %self : !llzk.struct<@B<[]>>
// CHECK-NEXT:    }
// CHECK-NEXT:    func @constrain(%arg0: !llzk.struct<@B<[]>>) {
// CHECK-NEXT:      %0 = readf %arg0[@"$temp"] : <@B<[]>>, !llzk.struct<@A<[!llzk.felt]>>
// CHECK-NEXT:      call @A::@constrain(%0) : (!llzk.struct<@A<[!llzk.felt]>>) -> ()
// CHECK-NEXT:      %1 = readf %arg0[@"$temp_0"] : <@B<[]>>, !llzk.struct<@A<[!llzk.felt]>>
// CHECK-NEXT:      call @A::@constrain(%1) : (!llzk.struct<@A<[!llzk.felt]>>) -> ()
// CHECK-NEXT:      %array = new_array %0, %1 : <2 x !llzk.struct<@A<[!llzk.felt]>>>
// CHECK-NEXT:      %2 = readf %arg0[@"$temp_1"] : <@B<[]>>, !llzk.struct<@Head<[!llzk.struct<@Component<[]>>, !llzk.felt]>>
// CHECK-NEXT:      call @Head::@constrain(%2, %array) : (!llzk.struct<@Head<[!llzk.struct<@Component<[]>>, !llzk.felt]>>, !llzk.array<2 x !llzk.struct<@A<[!llzk.felt]>>>) -> ()
// CHECK-NEXT:      return
// CHECK-NEXT:    }
// CHECK-NEXT:  }

//      CHECK:  llzk.struct @Top<[]> {
// CHECK-NEXT:    field @"$super" : !llzk.struct<@Component<[]>>
// CHECK-NEXT:    field @"$temp" : !llzk.struct<@Component<[]>>
// CHECK-NEXT:    field @b : !llzk.struct<@B<[]>>
// CHECK-NEXT:    field @a : !llzk.struct<@A<[!llzk.felt]>>
// CHECK-NEXT:    func @compute() -> !llzk.struct<@Top<[]>> {
// CHECK-NEXT:      %self = new_struct : <@Top<[]>>
// CHECK-NEXT:      %0 = call @A::@compute() : () -> !llzk.struct<@A<[!llzk.felt]>>
// CHECK-NEXT:      writef %self[@a] = %0 : <@Top<[]>>, !llzk.struct<@A<[!llzk.felt]>>
// CHECK-NEXT:      %1 = readf %self[@a] : <@Top<[]>>, !llzk.struct<@A<[!llzk.felt]>>
// CHECK-NEXT:      %2 = call @B::@compute() : () -> !llzk.struct<@B<[]>>
// CHECK-NEXT:      writef %self[@b] = %2 : <@Top<[]>>, !llzk.struct<@B<[]>>
// CHECK-NEXT:      %3 = readf %self[@b] : <@Top<[]>>, !llzk.struct<@B<[]>>
// CHECK-NEXT:      %4 = readf %1[@"$super"] : <@A<[!llzk.felt]>>, !llzk.struct<@Head<[!llzk.struct<@Component<[]>>, !llzk.felt]>>
// CHECK-NEXT:      %5 = readf %4[@"$super"] : <@Head<[!llzk.struct<@Component<[]>>, !llzk.felt]>>, !llzk.felt
// CHECK-NEXT:      %6 = readf %3[@"$super"] : <@B<[]>>, !llzk.struct<@Head<[!llzk.struct<@Component<[]>>, !llzk.felt]>>
// CHECK-NEXT:      %7 = readf %6[@"$super"] : <@Head<[!llzk.struct<@Component<[]>>, !llzk.felt]>>, !llzk.felt
// CHECK-NEXT:      %8 = call @Component::@compute() : () -> !llzk.struct<@Component<[]>>
// CHECK-NEXT:      writef %self[@"$temp"] = %8 : <@Top<[]>>, !llzk.struct<@Component<[]>>
// CHECK-NEXT:      %9 = readf %self[@"$temp"] : <@Top<[]>>, !llzk.struct<@Component<[]>>
// CHECK-NEXT:      writef %self[@"$super"] = %9 : <@Top<[]>>, !llzk.struct<@Component<[]>>
// CHECK-NEXT:      return %self : !llzk.struct<@Top<[]>>
// CHECK-NEXT:    }
// CHECK-NEXT:    func @constrain(%arg0: !llzk.struct<@Top<[]>>) {
// CHECK-NEXT:      %0 = readf %arg0[@a] : <@Top<[]>>, !llzk.struct<@A<[!llzk.felt]>>
// CHECK-NEXT:      call @A::@constrain(%0) : (!llzk.struct<@A<[!llzk.felt]>>) -> ()
// CHECK-NEXT:      %1 = readf %arg0[@b] : <@Top<[]>>, !llzk.struct<@B<[]>>
// CHECK-NEXT:      call @B::@constrain(%1) : (!llzk.struct<@B<[]>>) -> ()
// CHECK-NEXT:      %2 = readf %0[@"$super"] : <@A<[!llzk.felt]>>, !llzk.struct<@Head<[!llzk.struct<@Component<[]>>, !llzk.felt]>>
// CHECK-NEXT:      %3 = readf %2[@"$super"] : <@Head<[!llzk.struct<@Component<[]>>, !llzk.felt]>>, !llzk.felt
// CHECK-NEXT:      %4 = readf %1[@"$super"] : <@B<[]>>, !llzk.struct<@Head<[!llzk.struct<@Component<[]>>, !llzk.felt]>>
// CHECK-NEXT:      %5 = readf %4[@"$super"] : <@Head<[!llzk.struct<@Component<[]>>, !llzk.felt]>>, !llzk.felt
// CHECK-NEXT:      emit_eq %3, %5 : !llzk.felt, !llzk.felt
// CHECK-NEXT:      %6 = readf %arg0[@"$temp"] : <@Top<[]>>, !llzk.struct<@Component<[]>>
// CHECK-NEXT:      call @Component::@constrain(%6) : (!llzk.struct<@Component<[]>>) -> ()
// CHECK-NEXT:      return
// CHECK-NEXT:    }
// CHECK-NEXT:  }


