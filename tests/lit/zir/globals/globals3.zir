// RUN: zklang -o - %s --strip-debug-info | FileCheck %s

component A() {
  global a := Reg(1);
  a = 1;
}

component B() {
  global b : Reg;
  b = 2;
}

component C() {
  global c : Reg;
  c = 1;
}

component Top() {
  global a : Reg;
  B();
  A();
  C();
}

test TestRunner {
  Top();
}

// CHECK-LABEL: module @globals {
// CHECK-NEXT:    global.def @c : !struct.type<@Reg<[]>>
// CHECK-NEXT:    global.def @b : !struct.type<@Reg<[]>>
// CHECK-NEXT:    global.def @a : !struct.type<@Reg<[]>>
// CHECK-NEXT:  }
//
// CHECK-LABEL: struct.def @A<[]> {
// CHECK-LABEL:   function.def @compute() -> !struct.type<@A<[]>> 
// CHECK-DAG:       %[[VAL_0:.*]] = felt.const  1
// CHECK-DAG:       %[[VAL_1:.*]] = struct.new : <@A<[]>>
// CHECK-DAG:       %[[VAL_2:.*]] = function.call @Reg::@compute(%[[VAL_0]]) : (!felt.type) -> !struct.type<@Reg<[]>>
// CHECK-DAG:       global.write @globals::@a = %[[VAL_2]] : !struct.type<@Reg<[]>>
// CHECK-DAG:       %[[VAL_4:.*]] = global.read @globals::@a : !struct.type<@Reg<[]>>
// CHECK-DAG:       return %[[VAL_1]] : !struct.type<@A<[]>>
// CHECK-DAG:     }
// CHECK-LABEL:   function.def @constrain
// CHECK-SAME:    (%[[VAL_9:.*]]: !struct.type<@A<[]>>) 
// CHECK-DAG:       %[[VAL_10:.*]] = felt.const  1
// CHECK-DAG:       %[[VAL_11:.*]] = global.read @globals::@a : !struct.type<@Reg<[]>>
// CHECK-DAG:       function.call @Reg::@constrain(%[[VAL_11]], %[[VAL_10]]) : (!struct.type<@Reg<[]>>, !felt.type) -> ()
// CHECK-DAG:       %[[VAL_12:.*]] = global.read @globals::@a : !struct.type<@Reg<[]>>
// CHECK-DAG:       %[[VAL_13:.*]] = struct.readf %[[VAL_12]][@"$super"] : <@Reg<[]>>, !struct.type<@NondetReg<[]>>
// CHECK-DAG:       %[[VAL_14:.*]] = struct.readf %[[VAL_13]][@"$super"] : <@NondetReg<[]>>, !felt.type
// CHECK-DAG:       constrain.eq %[[VAL_14]], %[[VAL_10]] : !felt.type, !felt.type
// CHECK-DAG:       %[[VAL_15:.*]] = struct.readf %[[VAL_9]][@"$temp"] : <@A<[]>>, !struct.type<@Component<[]>>
// CHECK-DAG:       function.call @Component::@constrain(%[[VAL_15]]) : (!struct.type<@Component<[]>>) -> ()
// CHECK-DAG:       return
// CHECK-DAG:     }
// CHECK-DAG:   }
//
// CHECK-LABEL: struct.def @B<[]> {
// CHECK-LABEL:   function.def @compute() -> !struct.type<@B<[]>> 
// CHECK-DAG:       %[[VAL_0:.*]] = struct.new : <@B<[]>>
// CHECK-DAG:       %[[VAL_1:.*]] = global.read @globals::@b : !struct.type<@Reg<[]>>
// CHECK-DAG:       %[[VAL_2:.*]] = struct.readf %[[VAL_1]][@"$super"] : <@Reg<[]>>, !struct.type<@NondetReg<[]>>
// CHECK-DAG:       %[[VAL_3:.*]] = struct.readf %[[VAL_2]][@"$super"] : <@NondetReg<[]>>, !felt.type
// CHECK-DAG:       %[[VAL_4:.*]] = function.call @Component::@compute() : () -> !struct.type<@Component<[]>>
// CHECK-DAG:       writef %[[VAL_0]][@"$temp"] = %[[VAL_4]] : <@B<[]>>, !struct.type<@Component<[]>>
// CHECK-DAG:       %[[VAL_5:.*]] = struct.readf %[[VAL_0]][@"$temp"] : <@B<[]>>, !struct.type<@Component<[]>>
// CHECK-DAG:       writef %[[VAL_0]][@"$super"] = %[[VAL_5]] : <@B<[]>>, !struct.type<@Component<[]>>
// CHECK-DAG:       return %[[VAL_0]] : !struct.type<@B<[]>>
// CHECK-DAG:     }
// CHECK-LABEL:   function.def @constrain
// CHECK-SAME:    (%[[VAL_6:.*]]: !struct.type<@B<[]>>) 
// CHECK-DAG:       %[[VAL_7:.*]] = felt.const  2
// CHECK-DAG:       %[[VAL_8:.*]] = global.read @globals::@b : !struct.type<@Reg<[]>>
// CHECK-DAG:       %[[VAL_9:.*]] = struct.readf %[[VAL_8]][@"$super"] : <@Reg<[]>>, !struct.type<@NondetReg<[]>>
// CHECK-DAG:       %[[VAL_10:.*]] = struct.readf %[[VAL_9]][@"$super"] : <@NondetReg<[]>>, !felt.type
// CHECK-DAG:       constrain.eq %[[VAL_10]], %[[VAL_7]] : !felt.type, !felt.type
// CHECK-DAG:       %[[VAL_11:.*]] = struct.readf %[[VAL_6]][@"$temp"] : <@B<[]>>, !struct.type<@Component<[]>>
// CHECK-DAG:       function.call @Component::@constrain(%[[VAL_11]]) : (!struct.type<@Component<[]>>) -> ()
// CHECK-DAG:       return
// CHECK-DAG:     }
// CHECK-DAG:   }
//
// CHECK-LABEL: struct.def @C<[]> {
// CHECK-LABEL:   function.def @compute() -> !struct.type<@C<[]>> 
// CHECK-DAG:       %[[VAL_0:.*]] = struct.new : <@C<[]>>
// CHECK-DAG:       %[[VAL_1:.*]] = global.read @globals::@c : !struct.type<@Reg<[]>>
// CHECK-DAG:       %[[VAL_2:.*]] = struct.readf %[[VAL_1]][@"$super"] : <@Reg<[]>>, !struct.type<@NondetReg<[]>>
// CHECK-DAG:       %[[VAL_3:.*]] = struct.readf %[[VAL_2]][@"$super"] : <@NondetReg<[]>>, !felt.type
// CHECK-DAG:       %[[VAL_4:.*]] = function.call @Component::@compute() : () -> !struct.type<@Component<[]>>
// CHECK-DAG:       writef %[[VAL_0]][@"$temp"] = %[[VAL_4]] : <@C<[]>>, !struct.type<@Component<[]>>
// CHECK-DAG:       %[[VAL_5:.*]] = struct.readf %[[VAL_0]][@"$temp"] : <@C<[]>>, !struct.type<@Component<[]>>
// CHECK-DAG:       writef %[[VAL_0]][@"$super"] = %[[VAL_5]] : <@C<[]>>, !struct.type<@Component<[]>>
// CHECK-DAG:       return %[[VAL_0]] : !struct.type<@C<[]>>
// CHECK-DAG:     }
// CHECK-LABEL:   function.def @constrain
// CHECK-SAME:    (%[[VAL_6:.*]]: !struct.type<@C<[]>>) 
// CHECK-DAG:       %[[VAL_7:.*]] = felt.const  1
// CHECK-DAG:       %[[VAL_8:.*]] = global.read @globals::@c : !struct.type<@Reg<[]>>
// CHECK-DAG:       %[[VAL_9:.*]] = struct.readf %[[VAL_8]][@"$super"] : <@Reg<[]>>, !struct.type<@NondetReg<[]>>
// CHECK-DAG:       %[[VAL_10:.*]] = struct.readf %[[VAL_9]][@"$super"] : <@NondetReg<[]>>, !felt.type
// CHECK-DAG:       constrain.eq %[[VAL_10]], %[[VAL_7]] : !felt.type, !felt.type
// CHECK-DAG:       %[[VAL_11:.*]] = struct.readf %[[VAL_6]][@"$temp"] : <@C<[]>>, !struct.type<@Component<[]>>
// CHECK-DAG:       function.call @Component::@constrain(%[[VAL_11]]) : (!struct.type<@Component<[]>>) -> ()
// CHECK-DAG:       return
// CHECK-DAG:     }
// CHECK-DAG:   }
