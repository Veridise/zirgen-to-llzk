// RUN: zklang -o - %s | FileCheck %s

extern IsFirstCycle() : Val;

component SetGlobal(v: Val) {
   global MyGlobal := Reg(v);
}

component CheckGlobal() {
  global MyGlobal : Reg;
  MyGlobal = 5;
}

component Top() {
   isFirst := NondetReg(IsFirstCycle());
   x := [isFirst, 1 - isFirst] -> (
      SetGlobal(5),
      CheckGlobal()
   );
}

extern PrintVal(v: Val);

test Globals {
     Top();
     
     global MyGlobal : Reg;
     PrintVal(MyGlobal);
}

// CHECK-LABEL: module @globals {
// CHECK-NEXT:    llzk.global @MyGlobal : !llzk.struct<@Reg<[]>>
// CHECK-NEXT:  }
// 
// CHECK-LABEL: llzk.struct @SetGlobal<[]> {
// CHECK:         field @"$super" : !llzk.struct<@Component<[]>>
// CHECK:         field @"$temp" : !llzk.struct<@Component<[]>>
// CHECK:         func @compute(%[[VAL_0:.*]]: !llzk.felt) -> !llzk.struct<@SetGlobal<[]>> {
// CHECK:           %[[VAL_1:.*]] = new_struct : <@SetGlobal<[]>>
// CHECK:           %[[VAL_2:.*]] = call @Reg::@compute(%[[VAL_0]]) : (!llzk.felt) -> !llzk.struct<@Reg<[]>>
// CHECK:           writeg @globals::@MyGlobal = %[[VAL_2]] : !llzk.struct<@Reg<[]>>
// CHECK:           %[[VAL_5:.*]] = call @Component::@compute() : () -> !llzk.struct<@Component<[]>>
// CHECK:           writef %[[VAL_1]][@"$temp"] = %[[VAL_5]] : <@SetGlobal<[]>>, !llzk.struct<@Component<[]>>
// CHECK:           %[[VAL_6:.*]] = readf %[[VAL_1]][@"$temp"] : <@SetGlobal<[]>>, !llzk.struct<@Component<[]>>
// CHECK:           writef %[[VAL_1]][@"$super"] = %[[VAL_6]] : <@SetGlobal<[]>>, !llzk.struct<@Component<[]>>
// CHECK:           return %[[VAL_1]] : !llzk.struct<@SetGlobal<[]>>
// CHECK:         }
// CHECK:         func @constrain(%[[VAL_7:.*]]: !llzk.struct<@SetGlobal<[]>>, %[[VAL_8:.*]]: !llzk.felt) {
// CHECK:           %[[VAL_9:.*]] = readg @globals::@MyGlobal : !llzk.struct<@Reg<[]>>
// CHECK:           call @Reg::@constrain(%[[VAL_9]], %[[VAL_8]]) : (!llzk.struct<@Reg<[]>>, !llzk.felt) -> ()
// CHECK:           %[[VAL_11:.*]] = readf %[[VAL_7]][@"$temp"] : <@SetGlobal<[]>>, !llzk.struct<@Component<[]>>
// CHECK:           call @Component::@constrain(%[[VAL_11]]) : (!llzk.struct<@Component<[]>>) -> ()
// CHECK:           return
// CHECK:         }
// CHECK:       }
// 
// CHECK-LABEL: llzk.struct @CheckGlobal<[]> {
// CHECK:         field @"$super" : !llzk.struct<@Component<[]>>
// CHECK:         field @"$temp" : !llzk.struct<@Component<[]>>
// CHECK:         func @compute() -> !llzk.struct<@CheckGlobal<[]>> {
// CHECK:           %[[VAL_0:.*]] = new_struct : <@CheckGlobal<[]>>
// CHECK:           %[[VAL_4:.*]] = call @Component::@compute() : () -> !llzk.struct<@Component<[]>>
// CHECK:           writef %[[VAL_0]][@"$temp"] = %[[VAL_4]] : <@CheckGlobal<[]>>, !llzk.struct<@Component<[]>>
// CHECK:           %[[VAL_5:.*]] = readf %[[VAL_0]][@"$temp"] : <@CheckGlobal<[]>>, !llzk.struct<@Component<[]>>
// CHECK:           writef %[[VAL_0]][@"$super"] = %[[VAL_5]] : <@CheckGlobal<[]>>, !llzk.struct<@Component<[]>>
// CHECK:           return %[[VAL_0]] : !llzk.struct<@CheckGlobal<[]>>
// CHECK:         }
// CHECK:         func @constrain(%[[VAL_6:.*]]: !llzk.struct<@CheckGlobal<[]>>) {
// CHECK:           %[[VAL_7:.*]] = constfelt  5
// CHECK:           %[[VAL_8:.*]] = readg @globals::@MyGlobal : !llzk.struct<@Reg<[]>>
// CHECK:           %[[VAL_9:.*]] = readf %[[VAL_8]][@"$super"] : <@Reg<[]>>, !llzk.struct<@NondetReg<[]>>
// CHECK:           %[[VAL_10:.*]] = readf %[[VAL_9]][@"$super"] : <@NondetReg<[]>>, !llzk.felt
// CHECK:           emit_eq %[[VAL_10]], %[[VAL_7]] : !llzk.felt, !llzk.felt
// CHECK:           %[[VAL_11:.*]] = readf %[[VAL_6]][@"$temp"] : <@CheckGlobal<[]>>, !llzk.struct<@Component<[]>>
// CHECK:           call @Component::@constrain(%[[VAL_11]]) : (!llzk.struct<@Component<[]>>) -> ()
// CHECK:           return
// CHECK:         }
// CHECK:       }
//
// CHECK-LABEL: llzk.struct @Top<[]> {
