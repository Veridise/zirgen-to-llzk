// RUN: zklang -o - %s --strip-debug-info | FileCheck %s

extern IsFirstCycle() : Val;

component SetGlobal(v: Val) {
   global MyGlobal := Reg(v);
}

component CheckGlobal() {
  global MyGlobal : Reg;
  MyGlobal = 5;
}

component Top() {
   isFirst := NondetReg(IsFirstCycle());
   x := [isFirst, 1 - isFirst] -> (
      SetGlobal(5),
      CheckGlobal()
   );
}

extern PrintVal(v: Val);

test Globals {
   Top();

   global MyGlobal : Reg;
   PrintVal(MyGlobal);
}

// CHECK-LABEL: module @globals {
// CHECK-NEXT:    global.def @MyGlobal : !struct.type<@Reg<[]>>
// CHECK-NEXT:  }
//
// CHECK-LABEL: struct.def @SetGlobal<[]> {
// CHECK:         field @"$super" : !struct.type<@Component<[]>>
// CHECK:         field @"$temp" : !struct.type<@Component<[]>>
// CHECK:         function.def @compute(%[[VAL_0:.*]]: !felt.type) -> !struct.type<@SetGlobal<[]>> 
// CHECK:           %[[VAL_1:.*]] = struct.new : <@SetGlobal<[]>>
// CHECK:           %[[VAL_2:.*]] = function.call @Reg::@compute(%[[VAL_0]]) : (!felt.type) -> !struct.type<@Reg<[]>>
// CHECK:           global.write @globals::@MyGlobal = %[[VAL_2]] : !struct.type<@Reg<[]>>
// CHECK:           %[[VAL_5:.*]] = function.call @Component::@compute() : () -> !struct.type<@Component<[]>>
// CHECK:           struct.writef %[[VAL_1]][@"$temp"] = %[[VAL_5]] : <@SetGlobal<[]>>, !struct.type<@Component<[]>>
// CHECK:           %[[VAL_6:.*]] = struct.readf %[[VAL_1]][@"$temp"] : <@SetGlobal<[]>>, !struct.type<@Component<[]>>
// CHECK:           struct.writef %[[VAL_1]][@"$super"] = %[[VAL_6]] : <@SetGlobal<[]>>, !struct.type<@Component<[]>>
// CHECK:           return %[[VAL_1]] : !struct.type<@SetGlobal<[]>>
// CHECK:         }
// CHECK:         function.def @constrain(%[[VAL_7:.*]]: !struct.type<@SetGlobal<[]>>, %[[VAL_8:.*]]: !felt.type) 
// CHECK:           %[[VAL_9:.*]] = global.read @globals::@MyGlobal : !struct.type<@Reg<[]>>
// CHECK:           function.call @Reg::@constrain(%[[VAL_9]], %[[VAL_8]]) : (!struct.type<@Reg<[]>>, !felt.type) -> ()
// CHECK:           %[[VAL_11:.*]] = struct.readf %[[VAL_7]][@"$temp"] : <@SetGlobal<[]>>, !struct.type<@Component<[]>>
// CHECK:           function.call @Component::@constrain(%[[VAL_11]]) : (!struct.type<@Component<[]>>) -> ()
// CHECK:           return
// CHECK:         }
// CHECK:       }
//
// CHECK-LABEL: struct.def @CheckGlobal<[]> {
// CHECK:         field @"$super" : !struct.type<@Component<[]>>
// CHECK:         field @"$temp" : !struct.type<@Component<[]>>
// CHECK:         function.def @compute() -> !struct.type<@CheckGlobal<[]>> 
// CHECK:           %[[VAL_0:.*]] = struct.new : <@CheckGlobal<[]>>
// CHECK:           %[[VAL_4:.*]] = function.call @Component::@compute() : () -> !struct.type<@Component<[]>>
// CHECK:           struct.writef %[[VAL_0]][@"$temp"] = %[[VAL_4]] : <@CheckGlobal<[]>>, !struct.type<@Component<[]>>
// CHECK:           %[[VAL_5:.*]] = struct.readf %[[VAL_0]][@"$temp"] : <@CheckGlobal<[]>>, !struct.type<@Component<[]>>
// CHECK:           struct.writef %[[VAL_0]][@"$super"] = %[[VAL_5]] : <@CheckGlobal<[]>>, !struct.type<@Component<[]>>
// CHECK:           return %[[VAL_0]] : !struct.type<@CheckGlobal<[]>>
// CHECK:         }
// CHECK:         function.def @constrain(%[[VAL_6:.*]]: !struct.type<@CheckGlobal<[]>>) 
// CHECK:           %[[VAL_7:.*]] = felt.const  5
// CHECK:           %[[VAL_8:.*]] = global.read @globals::@MyGlobal : !struct.type<@Reg<[]>>
// CHECK:           %[[VAL_9:.*]] = struct.readf %[[VAL_8]][@"$super"] : <@Reg<[]>>, !struct.type<@NondetReg<[]>>
// CHECK:           %[[VAL_10:.*]] = struct.readf %[[VAL_9]][@"$super"] : <@NondetReg<[]>>, !felt.type
// CHECK:           constrain.eq %[[VAL_10]], %[[VAL_7]] : !felt.type, !felt.type
// CHECK:           %[[VAL_11:.*]] = struct.readf %[[VAL_6]][@"$temp"] : <@CheckGlobal<[]>>, !struct.type<@Component<[]>>
// CHECK:           function.call @Component::@constrain(%[[VAL_11]]) : (!struct.type<@Component<[]>>) -> ()
// CHECK:           return
// CHECK:         }
// CHECK:       }
//
// CHECK-LABEL: struct.def @Top<[]> {
