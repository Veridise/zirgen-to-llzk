// RUN: zklang -o - %s --strip-debug-info | FileCheck  %s

component Foo(x: ExtVal) {
  for i : 1..10 { x }
// CHECK-LABEL: struct.def @Foo<[]> {
// CHECK: field @"$super" : !array.type<9,4 x !felt.type>
// CHECK: field @"$array" : !array.type<9,4 x !felt.type>

// CHECK: function.def @compute
// CHECK-SAME: (%[[A0:[0-9a-zA-Z_\.]+]]: !array.type<4 x !felt.type>) -> !struct.type<@Foo<[]>> 

// CHECK: %[[SELF:[0-9a-zA-Z_\.]+]] = struct.new : <@Foo<[]>>
// CHECK: %[[T0:[0-9a-zA-Z_\.]+]] = array.new :  <9,4 x !felt.type>

// CHECK: scf.for 
// CHECK-SAME:    %[[A1:[0-9a-zA-Z_\.]+]] = %{{[0-9a-zA-Z_\.]+}} to %{{[0-9a-zA-Z_\.]+}} step %{{[0-9a-zA-Z_\.]+}}
// CHECK: array.insert %[[T0]][%[[A1]]] = %[[A0]] : <9,4 x !felt.type>, <4 x !felt.type>
// CHECK: struct.writef %[[SELF]][@"$array"] = %[[T0]] : <@Foo<[]>>, !array.type<9,4 x !felt.type>
// CHECK: %[[T2:[0-9a-zA-Z_\.]+]] = struct.readf %[[SELF]][@"$array"] : <@Foo<[]>>, !array.type<9,4 x !felt.type>
// CHECK: struct.writef %[[SELF]][@"$super"] = %[[T2]] : <@Foo<[]>>, !array.type<9,4 x !felt.type>


// CHECK-LABEL: function.def @constrain(%arg0: !struct.type<@Foo<[]>>, 


}
