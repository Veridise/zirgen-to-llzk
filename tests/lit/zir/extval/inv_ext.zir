// RUN: zklang -o - %s --print-debug-info=false | FileCheck %s --enable-var-scope

component Foo(x: ExtVal) {
  ExtInv(x)
}

// CHECK-LABEL: struct.def @Foo<[]> {
// CHECK: field @"$super" : !array.type<4 x !felt.type>

// CHECK-LABEL: function.def @compute
// CHECK-SAME: (%[[A:[0-9a-zA-Z_\.]+]]: !array.type<4 x !felt.type>) -> !struct.type<@Foo<[]>> 

// CHECK: %[[BETA:[0-9a-zA-Z_\.]+]] = felt.const  11
// CHECK: %[[C3:[0-9a-zA-Z_\.]+]] = arith.constant  3
// CHECK: %[[C2:[0-9a-zA-Z_\.]+]] = arith.constant  2
// CHECK: %[[C1:[0-9a-zA-Z_\.]+]] = arith.constant  1
// CHECK: %[[C0:[0-9a-zA-Z_\.]+]] = arith.constant  0
// CHECK: %[[A0:[0-9a-zA-Z_\.]+]] = array.read %[[A]][%[[C0]]] : <4 x !felt.type>, !felt.type
// CHECK: %[[A1:[0-9a-zA-Z_\.]+]] = array.read %[[A]][%[[C1]]] : <4 x !felt.type>, !felt.type
// CHECK: %[[A2:[0-9a-zA-Z_\.]+]] = array.read %[[A]][%[[C2]]] : <4 x !felt.type>, !felt.type
// CHECK: %[[A3:[0-9a-zA-Z_\.]+]] = array.read %[[A]][%[[C3]]] : <4 x !felt.type>, !felt.type

// COM: Making the checks DAG checks because different compilers (clang vs gcc)
// COM: may re-order some of the computation in the BabyBear converter, which
// COM: may result in a different, yet valid, re-ordering of the below SSA values.

// COM:                                                   a[2] * a[2]
// CHECK-DAG: %[[T2:[0-9a-zA-Z_\.]+]] = felt.mul %[[A2]], %[[A2]]
// COM:                                    a[3] + a[3]
// CHECK-DAG: %[[T1:[0-9a-zA-Z_\.]+]] = felt.add %[[A3]], %[[A3]]
// COM:                            a[1] * (a[3] + a[3])
// CHECK-DAG: %[[T3:[0-9a-zA-Z_\.]+]] = felt.mul %[[A1]], %[[T1]]
// COM:                            a[1] * (a[3] + a[3]) - a[2] * a[2]
// CHECK-DAG: %[[T4:[0-9a-zA-Z_\.]+]] = felt.sub %[[T3]], %[[T2]]
// COM:                    BETA * (a[1] * (a[3] + a[3]) - a[2] * a[2])
// CHECK-DAG: %[[T5:[0-9a-zA-Z_\.]+]] = felt.mul %[[T4]], %[[BETA]]
// COM:      a[0] * a[0]
// CHECK-DAG: %[[T0:[0-9a-zA-Z_\.]+]] = felt.mul %[[A0]], %[[A0]]
// COM: b0 = a[0] * a[0] + BETA * (a[1] * (a[3] + a[3]) - a[2] * a[2])
// CHECK-DAG: %[[B0:[0-9a-zA-Z_\.]+]] = felt.add %[[T0]], %[[T5]]

// COM:                                                   a[3] * a[3]
// CHECK-DAG: %[[T9:[0-9a-zA-Z_\.]+]] = felt.mul %[[A3]], %[[A3]]
// COM:                                           BETA * (a[3] * a[3])
// CHECK-DAG: %[[T10:[0-9a-zA-Z_\.]+]] = felt.mul %[[T9]], %[[BETA]]
// COM:                             a[1] * a[1]
// CHECK-DAG: %[[T8:[0-9a-zA-Z_\.]+]] = felt.mul %[[A1]], %[[A1]]
// COM:              a[2] + a[2]
// CHECK-DAG: %[[T6:[0-9a-zA-Z_\.]+]] = felt.add %[[A2]], %[[A2]]
// COM:      a[0] * (a[2] + a[2])
// CHECK-DAG: %[[T7:[0-9a-zA-Z_\.]+]] = felt.mul %[[A0]], %[[T6]]
// COM:      a[0] * (a[2] + a[2]) - a[1] * a[1]
// CHECK-DAG: %[[T11:[0-9a-zA-Z_\.]+]] = felt.sub %[[T7]], %[[T8]]
// COM: b2 = a[0] * (a[2] + a[2]) - a[1] * a[1] + BETA * (a[3] * a[3])
// CHECK-DAG: %[[B2:[0-9a-zA-Z_\.]+]] = felt.add %[[T11]], %[[T10]]

// COM:               BETA * b2
// CHECK-DAG: %[[T13:[0-9a-zA-Z_\.]+]] = felt.mul %[[B2]], %[[BETA]]
// COM:               BETA * b2 * b2
// CHECK-DAG: %[[T14:[0-9a-zA-Z_\.]+]] = felt.mul %[[T13]], %[[B2]]
// COM:     b0 * b0
// CHECK-DAG: %[[T12:[0-9a-zA-Z_\.]+]] = felt.mul %[[B0]], %[[B0]]
// COM: c = b0 * b0 + BETA * b2 * b2
// CHECK-DAG: %[[C:[0-9a-zA-Z_\.]+]] = felt.add %[[T12]], %[[T14]]

// COM: ic = c.inv()
// CHECK-DAG: %[[IC:[0-9a-zA-Z_\.]+]] = felt.inv %[[C]]

// COM: b0' = b0 * ic
// CHECK-DAG: %[[B0bis:[0-9a-zA-Z_\.]+]] = felt.mul %[[B0]], %[[IC]]

// COM: b2' = b2 * ic
// CHECK-DAG: %[[B2bis:[0-9a-zA-Z_\.]+]] = felt.mul %[[B2]], %[[IC]]

// COM:                      BETA * a[2]
// CHECK-DAG: %[[T16:[0-9a-zA-Z_\.]+]] = felt.mul %[[A2]], %[[BETA]]
// COM:                      BETA * a[2] * b2'
// CHECK-DAG: %[[T17:[0-9a-zA-Z_\.]+]] = felt.mul %[[T16]], %[[B2bis]]
// COM:         a[0] * b0'
// CHECK-DAG: %[[T15:[0-9a-zA-Z_\.]+]] = felt.mul %[[A0]], %[[B0bis]]
// COM: out_0 = a[0] * b0' + BETA * a[2] * b2'
// CHECK-DAG: %[[OUT0:[0-9a-zA-Z_\.]+]] = felt.add %[[T15]], %[[T17]]

// COM:                       BETA * a[3]
// CHECK-DAG: %[[T20:[0-9a-zA-Z_\.]+]] = felt.mul %[[A3]], %[[BETA]]
// COM:                       BETA * a[3] * b2'
// CHECK-DAG: %[[T21:[0-9a-zA-Z_\.]+]] = felt.mul %[[T20]], %[[B2bis]]
// COM:         -a[1]
// CHECK-DAG: %[[T18:[0-9a-zA-Z_\.]+]] = felt.neg %[[A1]]
// COM:         -a[1] * b0'
// CHECK-DAG: %[[T19:[0-9a-zA-Z_\.]+]] = felt.mul %[[T18]], %[[B0bis]]
// COM: out_1 = -a[1] * b0' - BETA * a[3] * b2'
// CHECK-DAG: %[[OUT1:[0-9a-zA-Z_\.]+]] = felt.sub %[[T19]], %[[T21]]

// COM:                       a[2] * b0'
// CHECK-DAG: %[[T24:[0-9a-zA-Z_\.]+]] = felt.mul %[[A2]], %[[B0bis]]
// COM:         -a[0]
// CHECK-DAG: %[[T22:[0-9a-zA-Z_\.]+]] = felt.neg %[[A0]]
// COM:         -a[0] * b2'
// CHECK-DAG: %[[T23:[0-9a-zA-Z_\.]+]] = felt.mul %[[T22]], %[[B2bis]]
// COM: out_2 = -a[0] * b2' + a[2] * b0'
// CHECK-DAG: %[[OUT2:[0-9a-zA-Z_\.]+]] = felt.add %[[T23]], %[[T24]]

// COM:                      a[3] * b0'
// CHECK-DAG: %[[T26:[0-9a-zA-Z_\.]+]] = felt.mul %[[A3]], %[[B0bis]]
// COM:         a[1] * b2'
// CHECK-DAG: %[[T25:[0-9a-zA-Z_\.]+]] = felt.mul %[[A1]], %[[B2bis]]
// COM: out_3 = a[1] * b2' - a[3] * b0'
// CHECK-DAG: %[[OUT3:[0-9a-zA-Z_\.]+]] = felt.sub %[[T25]], %[[T26]]

// CHECK: %[[T27:[0-9a-zA-Z_\.]+]] = array.new %[[OUT0]], %[[OUT1]], %[[OUT2]], %[[OUT3]] : <4 x !felt.type>

// CHECK-LABEL: function.def @constrain(%arg0: !struct.type<@Foo<[]>>,
