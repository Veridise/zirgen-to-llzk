// RUN: zklang -o - %s | FileCheck %s

component Foo<N: Val>(a: Array<Val, N>) {
}

component Bar<N: Val>() {
  Foo<N>(for i: 0..N { NondetReg(i) })
// CHECK-LABEL:    function.def @compute() -> !struct.type<@Bar<[@N]>> 
//       CHECK:      %[[T1:[0-9a-zA-Z_\.]+]] = arith.constant 0 : index
//       CHECK:      %[[T0:[0-9a-zA-Z_\.]+]] = arith.constant 1 : index
//       CHECK:      %[[T9:[0-9a-zA-Z_\.]+]] = poly.read_const @N : index
//       CHECK:      %[[T3:[0-9a-zA-Z_\.]+]] = array.new  : <@N x !felt.type> 
//         COM:           I don't care where this array comes from but it has to be the same one used in the read ops below.
//       CHECK:      %[[T4:[0-9a-zA-Z_\.]+]] = array.len %[[T2:[0-9a-zA-Z_\.]+]], %[[T1]] : <#map x !struct.type<@NondetReg<[]>>>
//       CHECK:      scf.for %[[A0:[0-9a-zA-Z_\.]+]] = %[[T1]] to %[[T0]] step %[[T4]] {
//       CHECK:        %[[T5:[0-9a-zA-Z_\.]+]] = array.read %[[T2]][%[[A0]]] : <#map x !struct.type<@NondetReg<[]>>>, !struct.type<@NondetReg<[]>>
//       CHECK:        %[[T6:[0-9a-zA-Z_\.]+]] = struct.readf %[[T5]][@"$super"] : <@NondetReg<[]>>, !felt.type
//       CHECK:        array.write %[[T3]][%[[A0]]] = %[[T6]] : <@N x !felt.type>, !felt.type
//       CHECK:      %[[T7:[0-9a-zA-Z_\.]+]] = function.call @Foo::@compute(%[[T3]]) : (!array.type<@N x !felt.type>) -> !struct.type<@Foo<[@N]>> 
//       CHECK:      return %{{[0-9a-zA-Z_\.]+}} : !struct.type<@Bar<[@N]>>
}
