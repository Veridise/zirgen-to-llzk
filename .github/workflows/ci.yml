name: CI
on:
  push:
    branches: [ $default-branch ]
  pull_request:

jobs:
  build:
    name: "Build"
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      matrix:
        os: [ ubuntu-24.04 ]
        build_type: [ Debug ]
        generator: [ Ninja ]
        c_compiler: [ gcc, clang ]
        sanitizers: [ yes, no ]
        include:
          - c_compiler: gcc 
            cpp_compiler: g++
          - c_compiler: clang 
            cpp_compiler: clang++
          - sanitizers: yes 
            extra_cmake_flags: |
              -DZKLANG_ENABLE_SANITIZER_ADDRESS=YES \
              -DZKLANG_ENABLE_SANITIZER_UNDEFINED=YES 
          - sanitizers: no 
            extra_cmake_flags: |
              -DZKLANG_ENABLE_SANITIZER_ADDRESS=NO \
              -DZKLANG_ENABLE_SANITIZER_UNDEFINED=NO 
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          submodules: recursive
      - uses: cachix/install-nix-action@v27
        with:
          install_url: https://releases.nixos.org/nix/nix-2.23.3/install
          github_access_token: "${{ secrets.CI_BUILD_TOKEN }}"
      - name: Set Git credentials
        run: |
          git config --global 'url.https://api@github.com/'.insteadOf 'https://github.com/'
          git config --global 'url.https://ssh@github.com/'.insteadOf 'ssh://git@github.com/'
          git config --global 'url.https://git@github.com/'.insteadOf 'git@github.com:'
          echo 'echo "$CI_BOT_PAT"' > ~/.git-askpass
          chmod 500 ~/.git-askpass
          git config --global core.askPass "$HOME"/.git-askpass
      - uses: cachix/cachix-action@v15
        with:
          name: veridise-private
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
          pushFilter: '(-source$)'
      - name: Set nix environment
        uses: nicknovitski/nix-develop@v1
        env:
          CI_BOT_PAT: "${{ secrets.CI_BUILD_TOKEN }}"

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DZKLANG_WARNINGS_AS_ERRORS=ON 
          -G ${{ matrix.generator }}
          -S ${{ github.workspace }}
          ${{ matrix.extra_cmake_flags }}
        # Keep the extra cmake flags at the end to avoid a line break!
      - name: Build zklang
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --target zklang
      - name: Build zklang-opt
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --target zklang-opt
      - name: Run unit tests
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --target check-unit
      - name: Run lit tests
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --target check-lit

      - name: Clear Git credentials
        if: "${{ always() }}"
        run: rm -rf "~/.git-askpass"
